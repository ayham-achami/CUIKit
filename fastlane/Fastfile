REQUIRED_XCODE_VERSION = "10.3"
SLACK_INCOMING_WEBHOOK_URL = "https://hooks.slack.com/services/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"
SLACK_INCOMING_CHANNEL = "#frameworks"
SLACK_API_TOKEN = "xoxp-735197608115-746649318405-748848474758-4348d8175049b0b5672db9b0e8d2281d"
LINT_REPORT_OUTPUT = "fastlane/lintResults.html"
default_platform(:ios)

platform :ios do

	desc "Swiftlint code validation"
	def check_code_style
        swiftlint(mode: :lint,
                  strict: true,
                  executable: './Pods/SwiftLint/swiftlint',
                  reporter: "html",
                  output_file: LINT_REPORT_OUTPUT,
                  config_file: '.swiftlint.yml')
	end

	desc "Submit error message to slack" 
	def submit_error(exception, message)
		slack(message: message,
			  success: false,
			  channel: SLACK_INCOMING_CHANNEL,
			  slack_url: SLACK_INCOMING_WEBHOOK_URL,
			  attachment_properties: {
				  fields: [
					{
						title: "Error message",
						value: exception.message,
						short: false
					}
				  ]
			 })
	end 
	
	desc "Submit success message to slack"
	def submit_suucess(message)
		slack(message: message,
			  success: true,
			  channel: SLACK_INCOMING_CHANNEL,
			  slack_url: SLACK_INCOMING_WEBHOOK_URL)
	end

	desc "Upload file to slack"
	def upload_file(message, file_path)
		slack_upload(slack_api_token: SLACK_API_TOKEN,
		             title: message,
                     channel: SLACK_INCOMING_CHANNEL,
                     file_path: file_path,
                     initial_comment: "New file posted")
	end

	desc "Abort script"
	def exit_lane(exception)
        UI.user_error!("Lane fail with exception: #{exception}")
        UI.error exception
	end

    desc "Check code style, create report html file run \"bundle exec fastlane prepareMergeRequest\""
	lane :lint do |options|
		begin
            check_code_style
		rescue => exception
			upload_file("Lint report", LINT_REPORT_OUTPUT)
			submit_error(exception, "Code style lint problem")
			exit_lane(exception)
		else
			submit_suucess("Success check code style")	
		end	
	end

    desc "Build CUIKit framework, run \"bundle exec fastlane buildFramework\""
	lane :buildFramework do |options|
		begin
            sh("bundle exec pod install --repo-update")
            clear_derived_data
            clean_build_artifacts
            scan(workspace: "CUIKit/CUIKit.xcworkspace",
                 scheme: "CUIKit",
                 devices: ["iPhone 11 Pro Max"],
                 clean: true)
		rescue => exception
			submit_error(exception, "Could't to build CUIKit framework")
			exit_lane(exception)
		else
			submit_suucess("Success build CUIKit framework")	
		end	
	end

    desc "Build CUIKit playground, run \"bundle exec fastlane buildFramework\""
	lane :buildPlayground do |options|
		begin
            sh("bundle exec pod install --repo-update")
            clear_derived_data
            clean_build_artifacts
            build_app(workspace: "Playground/Playground.xcworkspace",
                      scheme: "Playground",
                      clean: true,
                      skip_archive: true,
                      skip_codesigning: true)
		rescue => exception
			submit_error(exception, "Could't to build playground")
			exit_lane(exception)
		else
			submit_suucess("Success build playground")	
		end	
	end
end
